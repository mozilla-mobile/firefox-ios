// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(MozillaRustComponents)
import MozillaRustComponents
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_ads_client_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_ads_client_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureAdsClientInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}




/**
 * Top-level API for the mac component
 */
public protocol MozAdsClientProtocol: AnyObject, Sendable {
    
    func clearCache() throws 
    
    func cycleContextId() throws  -> String
    
    func recordClick(placement: MozAdsPlacement) throws 
    
    func recordImpression(placement: MozAdsPlacement) throws 
    
    func reportAd(placement: MozAdsPlacement) throws 
    
    func requestAds(mozAdConfigs: [MozAdsPlacementConfig]) throws  -> [String: MozAdsPlacement]
    
}
/**
 * Top-level API for the mac component
 */
open class MozAdsClient: MozAdsClientProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ads_client_fn_clone_mozadsclient(self.pointer, $0) }
    }
public convenience init() {
    let pointer =
        try! rustCall() {
    uniffi_ads_client_fn_constructor_mozadsclient_new($0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ads_client_fn_free_mozadsclient(pointer, $0) }
    }

    

    
open func clearCache()throws   {try rustCallWithError(FfiConverterTypeAdsClientApiError_lift) {
    uniffi_ads_client_fn_method_mozadsclient_clear_cache(self.uniffiClonePointer(),$0
    )
}
}
    
open func cycleContextId()throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeAdsClientApiError_lift) {
    uniffi_ads_client_fn_method_mozadsclient_cycle_context_id(self.uniffiClonePointer(),$0
    )
})
}
    
open func recordClick(placement: MozAdsPlacement)throws   {try rustCallWithError(FfiConverterTypeAdsClientApiError_lift) {
    uniffi_ads_client_fn_method_mozadsclient_record_click(self.uniffiClonePointer(),
        FfiConverterTypeMozAdsPlacement_lower(placement),$0
    )
}
}
    
open func recordImpression(placement: MozAdsPlacement)throws   {try rustCallWithError(FfiConverterTypeAdsClientApiError_lift) {
    uniffi_ads_client_fn_method_mozadsclient_record_impression(self.uniffiClonePointer(),
        FfiConverterTypeMozAdsPlacement_lower(placement),$0
    )
}
}
    
open func reportAd(placement: MozAdsPlacement)throws   {try rustCallWithError(FfiConverterTypeAdsClientApiError_lift) {
    uniffi_ads_client_fn_method_mozadsclient_report_ad(self.uniffiClonePointer(),
        FfiConverterTypeMozAdsPlacement_lower(placement),$0
    )
}
}
    
open func requestAds(mozAdConfigs: [MozAdsPlacementConfig])throws  -> [String: MozAdsPlacement]  {
    return try  FfiConverterDictionaryStringTypeMozAdsPlacement.lift(try rustCallWithError(FfiConverterTypeAdsClientApiError_lift) {
    uniffi_ads_client_fn_method_mozadsclient_request_ads(self.uniffiClonePointer(),
        FfiConverterSequenceTypeMozAdsPlacementConfig.lower(mozAdConfigs),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMozAdsClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = MozAdsClient

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> MozAdsClient {
        return MozAdsClient(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: MozAdsClient) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MozAdsClient {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: MozAdsClient, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAdsClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> MozAdsClient {
    return try FfiConverterTypeMozAdsClient.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAdsClient_lower(_ value: MozAdsClient) -> UnsafeMutableRawPointer {
    return FfiConverterTypeMozAdsClient.lower(value)
}




public struct AdCallbacks {
    public var click: String?
    public var impression: String?
    public var report: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(click: String?, impression: String?, report: String?) {
        self.click = click
        self.impression = impression
        self.report = report
    }
}

#if compiler(>=6)
extension AdCallbacks: Sendable {}
#endif


extension AdCallbacks: Equatable, Hashable {
    public static func ==(lhs: AdCallbacks, rhs: AdCallbacks) -> Bool {
        if lhs.click != rhs.click {
            return false
        }
        if lhs.impression != rhs.impression {
            return false
        }
        if lhs.report != rhs.report {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(click)
        hasher.combine(impression)
        hasher.combine(report)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAdCallbacks: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AdCallbacks {
        return
            try AdCallbacks(
                click: FfiConverterOptionString.read(from: &buf), 
                impression: FfiConverterOptionString.read(from: &buf), 
                report: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: AdCallbacks, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.click, into: &buf)
        FfiConverterOptionString.write(value.impression, into: &buf)
        FfiConverterOptionString.write(value.report, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdCallbacks_lift(_ buf: RustBuffer) throws -> AdCallbacks {
    return try FfiConverterTypeAdCallbacks.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdCallbacks_lower(_ value: AdCallbacks) -> RustBuffer {
    return FfiConverterTypeAdCallbacks.lower(value)
}


public struct AdContentCategory {
    public var taxonomy: IabContentTaxonomy
    public var categories: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(taxonomy: IabContentTaxonomy, categories: [String]) {
        self.taxonomy = taxonomy
        self.categories = categories
    }
}

#if compiler(>=6)
extension AdContentCategory: Sendable {}
#endif


extension AdContentCategory: Equatable, Hashable {
    public static func ==(lhs: AdContentCategory, rhs: AdContentCategory) -> Bool {
        if lhs.taxonomy != rhs.taxonomy {
            return false
        }
        if lhs.categories != rhs.categories {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(taxonomy)
        hasher.combine(categories)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAdContentCategory: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AdContentCategory {
        return
            try AdContentCategory(
                taxonomy: FfiConverterTypeIABContentTaxonomy.read(from: &buf), 
                categories: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: AdContentCategory, into buf: inout [UInt8]) {
        FfiConverterTypeIABContentTaxonomy.write(value.taxonomy, into: &buf)
        FfiConverterSequenceString.write(value.categories, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdContentCategory_lift(_ buf: RustBuffer) throws -> AdContentCategory {
    return try FfiConverterTypeAdContentCategory.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdContentCategory_lower(_ value: AdContentCategory) -> RustBuffer {
    return FfiConverterTypeAdContentCategory.lower(value)
}


public struct AdPlacementRequest {
    public var placement: String
    public var count: UInt32
    public var content: AdContentCategory?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(placement: String, count: UInt32, content: AdContentCategory?) {
        self.placement = placement
        self.count = count
        self.content = content
    }
}

#if compiler(>=6)
extension AdPlacementRequest: Sendable {}
#endif


extension AdPlacementRequest: Equatable, Hashable {
    public static func ==(lhs: AdPlacementRequest, rhs: AdPlacementRequest) -> Bool {
        if lhs.placement != rhs.placement {
            return false
        }
        if lhs.count != rhs.count {
            return false
        }
        if lhs.content != rhs.content {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(placement)
        hasher.combine(count)
        hasher.combine(content)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAdPlacementRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AdPlacementRequest {
        return
            try AdPlacementRequest(
                placement: FfiConverterString.read(from: &buf), 
                count: FfiConverterUInt32.read(from: &buf), 
                content: FfiConverterOptionTypeAdContentCategory.read(from: &buf)
        )
    }

    public static func write(_ value: AdPlacementRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.placement, into: &buf)
        FfiConverterUInt32.write(value.count, into: &buf)
        FfiConverterOptionTypeAdContentCategory.write(value.content, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdPlacementRequest_lift(_ buf: RustBuffer) throws -> AdPlacementRequest {
    return try FfiConverterTypeAdPlacementRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdPlacementRequest_lower(_ value: AdPlacementRequest) -> RustBuffer {
    return FfiConverterTypeAdPlacementRequest.lower(value)
}


public struct AdRequest {
    public var contextId: String
    public var placements: [AdPlacementRequest]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(contextId: String, placements: [AdPlacementRequest]) {
        self.contextId = contextId
        self.placements = placements
    }
}

#if compiler(>=6)
extension AdRequest: Sendable {}
#endif


extension AdRequest: Equatable, Hashable {
    public static func ==(lhs: AdRequest, rhs: AdRequest) -> Bool {
        if lhs.contextId != rhs.contextId {
            return false
        }
        if lhs.placements != rhs.placements {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(contextId)
        hasher.combine(placements)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAdRequest: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AdRequest {
        return
            try AdRequest(
                contextId: FfiConverterString.read(from: &buf), 
                placements: FfiConverterSequenceTypeAdPlacementRequest.read(from: &buf)
        )
    }

    public static func write(_ value: AdRequest, into buf: inout [UInt8]) {
        FfiConverterString.write(value.contextId, into: &buf)
        FfiConverterSequenceTypeAdPlacementRequest.write(value.placements, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdRequest_lift(_ buf: RustBuffer) throws -> AdRequest {
    return try FfiConverterTypeAdRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdRequest_lower(_ value: AdRequest) -> RustBuffer {
    return FfiConverterTypeAdRequest.lower(value)
}


public struct AdResponse {
    public var data: [String: [MozAd]]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(data: [String: [MozAd]]) {
        self.data = data
    }
}

#if compiler(>=6)
extension AdResponse: Sendable {}
#endif


extension AdResponse: Equatable, Hashable {
    public static func ==(lhs: AdResponse, rhs: AdResponse) -> Bool {
        if lhs.data != rhs.data {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(data)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAdResponse: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AdResponse {
        return
            try AdResponse(
                data: FfiConverterDictionaryStringSequenceTypeMozAd.read(from: &buf)
        )
    }

    public static func write(_ value: AdResponse, into buf: inout [UInt8]) {
        FfiConverterDictionaryStringSequenceTypeMozAd.write(value.data, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdResponse_lift(_ buf: RustBuffer) throws -> AdResponse {
    return try FfiConverterTypeAdResponse.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdResponse_lower(_ value: AdResponse) -> RustBuffer {
    return FfiConverterTypeAdResponse.lower(value)
}


public struct IabContent {
    public var taxonomy: IabContentTaxonomy
    public var categoryIds: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(taxonomy: IabContentTaxonomy, categoryIds: [String]) {
        self.taxonomy = taxonomy
        self.categoryIds = categoryIds
    }
}

#if compiler(>=6)
extension IabContent: Sendable {}
#endif


extension IabContent: Equatable, Hashable {
    public static func ==(lhs: IabContent, rhs: IabContent) -> Bool {
        if lhs.taxonomy != rhs.taxonomy {
            return false
        }
        if lhs.categoryIds != rhs.categoryIds {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(taxonomy)
        hasher.combine(categoryIds)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIABContent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IabContent {
        return
            try IabContent(
                taxonomy: FfiConverterTypeIABContentTaxonomy.read(from: &buf), 
                categoryIds: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: IabContent, into buf: inout [UInt8]) {
        FfiConverterTypeIABContentTaxonomy.write(value.taxonomy, into: &buf)
        FfiConverterSequenceString.write(value.categoryIds, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIABContent_lift(_ buf: RustBuffer) throws -> IabContent {
    return try FfiConverterTypeIABContent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIABContent_lower(_ value: IabContent) -> RustBuffer {
    return FfiConverterTypeIABContent.lower(value)
}


public struct MozAd {
    public var altText: String?
    public var blockKey: String?
    public var callbacks: AdCallbacks?
    public var format: String?
    public var imageUrl: String?
    public var url: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(altText: String?, blockKey: String?, callbacks: AdCallbacks?, format: String?, imageUrl: String?, url: String?) {
        self.altText = altText
        self.blockKey = blockKey
        self.callbacks = callbacks
        self.format = format
        self.imageUrl = imageUrl
        self.url = url
    }
}

#if compiler(>=6)
extension MozAd: Sendable {}
#endif


extension MozAd: Equatable, Hashable {
    public static func ==(lhs: MozAd, rhs: MozAd) -> Bool {
        if lhs.altText != rhs.altText {
            return false
        }
        if lhs.blockKey != rhs.blockKey {
            return false
        }
        if lhs.callbacks != rhs.callbacks {
            return false
        }
        if lhs.format != rhs.format {
            return false
        }
        if lhs.imageUrl != rhs.imageUrl {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(altText)
        hasher.combine(blockKey)
        hasher.combine(callbacks)
        hasher.combine(format)
        hasher.combine(imageUrl)
        hasher.combine(url)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMozAd: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MozAd {
        return
            try MozAd(
                altText: FfiConverterOptionString.read(from: &buf), 
                blockKey: FfiConverterOptionString.read(from: &buf), 
                callbacks: FfiConverterOptionTypeAdCallbacks.read(from: &buf), 
                format: FfiConverterOptionString.read(from: &buf), 
                imageUrl: FfiConverterOptionString.read(from: &buf), 
                url: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: MozAd, into buf: inout [UInt8]) {
        FfiConverterOptionString.write(value.altText, into: &buf)
        FfiConverterOptionString.write(value.blockKey, into: &buf)
        FfiConverterOptionTypeAdCallbacks.write(value.callbacks, into: &buf)
        FfiConverterOptionString.write(value.format, into: &buf)
        FfiConverterOptionString.write(value.imageUrl, into: &buf)
        FfiConverterOptionString.write(value.url, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAd_lift(_ buf: RustBuffer) throws -> MozAd {
    return try FfiConverterTypeMozAd.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAd_lower(_ value: MozAd) -> RustBuffer {
    return FfiConverterTypeMozAd.lower(value)
}


public struct MozAdsPlacement {
    public var placementConfig: MozAdsPlacementConfig
    public var content: MozAd

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(placementConfig: MozAdsPlacementConfig, content: MozAd) {
        self.placementConfig = placementConfig
        self.content = content
    }
}

#if compiler(>=6)
extension MozAdsPlacement: Sendable {}
#endif


extension MozAdsPlacement: Equatable, Hashable {
    public static func ==(lhs: MozAdsPlacement, rhs: MozAdsPlacement) -> Bool {
        if lhs.placementConfig != rhs.placementConfig {
            return false
        }
        if lhs.content != rhs.content {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(placementConfig)
        hasher.combine(content)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMozAdsPlacement: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MozAdsPlacement {
        return
            try MozAdsPlacement(
                placementConfig: FfiConverterTypeMozAdsPlacementConfig.read(from: &buf), 
                content: FfiConverterTypeMozAd.read(from: &buf)
        )
    }

    public static func write(_ value: MozAdsPlacement, into buf: inout [UInt8]) {
        FfiConverterTypeMozAdsPlacementConfig.write(value.placementConfig, into: &buf)
        FfiConverterTypeMozAd.write(value.content, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAdsPlacement_lift(_ buf: RustBuffer) throws -> MozAdsPlacement {
    return try FfiConverterTypeMozAdsPlacement.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAdsPlacement_lower(_ value: MozAdsPlacement) -> RustBuffer {
    return FfiConverterTypeMozAdsPlacement.lower(value)
}


public struct MozAdsPlacementConfig {
    public var placementId: String
    public var iabContent: IabContent?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(placementId: String, iabContent: IabContent?) {
        self.placementId = placementId
        self.iabContent = iabContent
    }
}

#if compiler(>=6)
extension MozAdsPlacementConfig: Sendable {}
#endif


extension MozAdsPlacementConfig: Equatable, Hashable {
    public static func ==(lhs: MozAdsPlacementConfig, rhs: MozAdsPlacementConfig) -> Bool {
        if lhs.placementId != rhs.placementId {
            return false
        }
        if lhs.iabContent != rhs.iabContent {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(placementId)
        hasher.combine(iabContent)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeMozAdsPlacementConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MozAdsPlacementConfig {
        return
            try MozAdsPlacementConfig(
                placementId: FfiConverterString.read(from: &buf), 
                iabContent: FfiConverterOptionTypeIABContent.read(from: &buf)
        )
    }

    public static func write(_ value: MozAdsPlacementConfig, into buf: inout [UInt8]) {
        FfiConverterString.write(value.placementId, into: &buf)
        FfiConverterOptionTypeIABContent.write(value.iabContent, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAdsPlacementConfig_lift(_ buf: RustBuffer) throws -> MozAdsPlacementConfig {
    return try FfiConverterTypeMozAdsPlacementConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeMozAdsPlacementConfig_lower(_ value: MozAdsPlacementConfig) -> RustBuffer {
    return FfiConverterTypeMozAdsPlacementConfig.lower(value)
}


public enum AdsClientApiError: Swift.Error {

    
    
    case Other(reason: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAdsClientApiError: FfiConverterRustBuffer {
    typealias SwiftType = AdsClientApiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AdsClientApiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Other(
            reason: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AdsClientApiError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Other(reason):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(reason, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdsClientApiError_lift(_ buf: RustBuffer) throws -> AdsClientApiError {
    return try FfiConverterTypeAdsClientApiError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAdsClientApiError_lower(_ value: AdsClientApiError) -> RustBuffer {
    return FfiConverterTypeAdsClientApiError.lower(value)
}


extension AdsClientApiError: Equatable, Hashable {}




extension AdsClientApiError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum IabAdUnitFormat {
    
    case billboard
    case smartphoneBanner300
    case smartphoneBanner320
    case leaderboard
    case superLeaderboardPushdown
    case portrait
    case skyscraper
    case mediumRectangle
    case twentyBySixty
    case mobilePhoneInterstitial640
    case mobilePhoneInterstitial750
    case mobilePhoneInterstitial1080
    case featurePhoneSmallBanner
    case featurePhoneMediumBanner
    case featurePhoneLargeBanner
}


#if compiler(>=6)
extension IabAdUnitFormat: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIABAdUnitFormat: FfiConverterRustBuffer {
    typealias SwiftType = IabAdUnitFormat

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IabAdUnitFormat {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .billboard
        
        case 2: return .smartphoneBanner300
        
        case 3: return .smartphoneBanner320
        
        case 4: return .leaderboard
        
        case 5: return .superLeaderboardPushdown
        
        case 6: return .portrait
        
        case 7: return .skyscraper
        
        case 8: return .mediumRectangle
        
        case 9: return .twentyBySixty
        
        case 10: return .mobilePhoneInterstitial640
        
        case 11: return .mobilePhoneInterstitial750
        
        case 12: return .mobilePhoneInterstitial1080
        
        case 13: return .featurePhoneSmallBanner
        
        case 14: return .featurePhoneMediumBanner
        
        case 15: return .featurePhoneLargeBanner
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IabAdUnitFormat, into buf: inout [UInt8]) {
        switch value {
        
        
        case .billboard:
            writeInt(&buf, Int32(1))
        
        
        case .smartphoneBanner300:
            writeInt(&buf, Int32(2))
        
        
        case .smartphoneBanner320:
            writeInt(&buf, Int32(3))
        
        
        case .leaderboard:
            writeInt(&buf, Int32(4))
        
        
        case .superLeaderboardPushdown:
            writeInt(&buf, Int32(5))
        
        
        case .portrait:
            writeInt(&buf, Int32(6))
        
        
        case .skyscraper:
            writeInt(&buf, Int32(7))
        
        
        case .mediumRectangle:
            writeInt(&buf, Int32(8))
        
        
        case .twentyBySixty:
            writeInt(&buf, Int32(9))
        
        
        case .mobilePhoneInterstitial640:
            writeInt(&buf, Int32(10))
        
        
        case .mobilePhoneInterstitial750:
            writeInt(&buf, Int32(11))
        
        
        case .mobilePhoneInterstitial1080:
            writeInt(&buf, Int32(12))
        
        
        case .featurePhoneSmallBanner:
            writeInt(&buf, Int32(13))
        
        
        case .featurePhoneMediumBanner:
            writeInt(&buf, Int32(14))
        
        
        case .featurePhoneLargeBanner:
            writeInt(&buf, Int32(15))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIABAdUnitFormat_lift(_ buf: RustBuffer) throws -> IabAdUnitFormat {
    return try FfiConverterTypeIABAdUnitFormat.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIABAdUnitFormat_lower(_ value: IabAdUnitFormat) -> RustBuffer {
    return FfiConverterTypeIABAdUnitFormat.lower(value)
}


extension IabAdUnitFormat: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum IabContentTaxonomy {
    
    case iab10
    case iab20
    case iab21
    case iab22
    case iab30
}


#if compiler(>=6)
extension IabContentTaxonomy: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIABContentTaxonomy: FfiConverterRustBuffer {
    typealias SwiftType = IabContentTaxonomy

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IabContentTaxonomy {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .iab10
        
        case 2: return .iab20
        
        case 3: return .iab21
        
        case 4: return .iab22
        
        case 5: return .iab30
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IabContentTaxonomy, into buf: inout [UInt8]) {
        switch value {
        
        
        case .iab10:
            writeInt(&buf, Int32(1))
        
        
        case .iab20:
            writeInt(&buf, Int32(2))
        
        
        case .iab21:
            writeInt(&buf, Int32(3))
        
        
        case .iab22:
            writeInt(&buf, Int32(4))
        
        
        case .iab30:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIABContentTaxonomy_lift(_ buf: RustBuffer) throws -> IabContentTaxonomy {
    return try FfiConverterTypeIABContentTaxonomy.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIABContentTaxonomy_lower(_ value: IabContentTaxonomy) -> RustBuffer {
    return FfiConverterTypeIABContentTaxonomy.lower(value)
}


extension IabContentTaxonomy: Equatable, Hashable {}






#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAdCallbacks: FfiConverterRustBuffer {
    typealias SwiftType = AdCallbacks?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAdCallbacks.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAdCallbacks.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeAdContentCategory: FfiConverterRustBuffer {
    typealias SwiftType = AdContentCategory?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeAdContentCategory.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeAdContentCategory.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeIABContent: FfiConverterRustBuffer {
    typealias SwiftType = IabContent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeIABContent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeIABContent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeAdPlacementRequest: FfiConverterRustBuffer {
    typealias SwiftType = [AdPlacementRequest]

    public static func write(_ value: [AdPlacementRequest], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeAdPlacementRequest.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [AdPlacementRequest] {
        let len: Int32 = try readInt(&buf)
        var seq = [AdPlacementRequest]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeAdPlacementRequest.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMozAd: FfiConverterRustBuffer {
    typealias SwiftType = [MozAd]

    public static func write(_ value: [MozAd], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMozAd.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MozAd] {
        let len: Int32 = try readInt(&buf)
        var seq = [MozAd]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMozAd.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeMozAdsPlacementConfig: FfiConverterRustBuffer {
    typealias SwiftType = [MozAdsPlacementConfig]

    public static func write(_ value: [MozAdsPlacementConfig], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeMozAdsPlacementConfig.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [MozAdsPlacementConfig] {
        let len: Int32 = try readInt(&buf)
        var seq = [MozAdsPlacementConfig]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeMozAdsPlacementConfig.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringTypeMozAdsPlacement: FfiConverterRustBuffer {
    public static func write(_ value: [String: MozAdsPlacement], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeMozAdsPlacement.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: MozAdsPlacement] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: MozAdsPlacement]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeMozAdsPlacement.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringSequenceTypeMozAd: FfiConverterRustBuffer {
    public static func write(_ value: [String: [MozAd]], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterSequenceTypeMozAd.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: [MozAd]] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: [MozAd]]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterSequenceTypeMozAd.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_ads_client_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_ads_client_checksum_method_mozadsclient_clear_cache() != 57649) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ads_client_checksum_method_mozadsclient_cycle_context_id() != 50453) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ads_client_checksum_method_mozadsclient_record_click() != 19930) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ads_client_checksum_method_mozadsclient_record_impression() != 42147) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ads_client_checksum_method_mozadsclient_report_ad() != 33332) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ads_client_checksum_method_mozadsclient_request_ads() != 19172) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ads_client_checksum_constructor_mozadsclient_new() != 60968) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureAdsClientInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all